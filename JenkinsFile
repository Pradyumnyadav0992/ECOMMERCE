def changedFiles = []
pipeline{

    agent {
        node {
        label 'Slave_node1'
        customWorkspace '/home/ubuntu/jenkins_workspace/' 
        }
    }
    environment {
        // VERSION = ''
        DOCKER_USENAME = credentials('DOCKER_CREDENTIALS')
    }

    // parameters {
    //     choice(name: "Version" , choices: ["A","B"], description: "Anything" )
    //     booleanParam(name: 'executeTest', defaultValue: true, description: "hi")
    // }

    stages{

        stage("Checkout") {
            steps {
                git branch: 'main', url: 'https://github.com/Pradyumnyadav0992/ECOMMERCE.git'
                script {
                    def version = sh(script: 'git describe --tags --abbrev=0', returnStdout: true).trim()
                    env.VERSION = version
                    echo "Using version: ${env.VERSION}"
                }
            }
        }



        stage("File change List"){
        steps {
            script {
                changedFiles = sh(script: 'git diff --name-only $(git describe --tags --abbrev=0)..HEAD', returnStdout: true).trim().split("\n")
                env.FILECHANGELIST = changedFiles
                echo "Changed files:\n${changedFiles}"

            }
        }

        }

        stage("JTest"){
            steps {
                echo "Changed files:"
            }
        
        }

        stage("Build"){
                    steps {
                        script{
                            def services =[ 'accounting', 'cart', 'ad', 'checkout', 'currency', 'email', 'frontend-proxy', 'fraud-detection', 
                                    'flagd-ui','frontend', 'image-provider','load-generator', 'kafka', 'payment', 'product-catalog', 'quote', 'recommendation', 'shipping']
                                    
                            for (svc in services) {
                                 
                                def matched = changedFiles.any { it.contains("src/"+svc) }
                                if (matched) {
                                        env.matchedvalue=svc
                                        
                                        sh '''
                                         #!/bin/bash
                                        set -a
                                        pwd
                                        ls -lta
                                        . $(pwd)/.env
                                        set +a
                                        SVC=\${matchedvalue}
                                        IMAGE_VERSION=\${VERSION}
                                        echo \"Image: \$IMAGE_NAME\"
                                        echo \"Version: \$IMAGE_VERSION\"
                                        echo \"Demo Version: \$DEMO_VERSION\"

                                                                         
                                      
                                        #docker build -t $IMAGE_NAME:$IMAGE_VERSION-src-$SVC -f  \${dockerfiles[\$svc]} .
                                        '''
                                         
                                 }
                             }
                            }



            }
        }

        stage("Image Scan"){
                        steps {
                echo "Changed files:"
            }
        }

        stage("Push"){

             steps {
                withCredentials([usernamePassword(credentialsId: 'DOCKER_CREDENTIALS', usernameVariable: 'USER', passwordVariable: 'PASSWD')]) {
                    echo "Pushing Docker image with user $USER"
                    // Example: sh "docker login -u $USER -p $PASSWD"
                }
            }
        }

        stage("Update Manifest"){
             steps {
                echo "Changed files:"
            }
        }
    }
}
